package biasbuster.twitter;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.mysql.jdbc.Statement;

/**
 * @author Joey
 * This class queries all the fields as stated in the problem statement
 */
public class QueryBuilder {

    //Methods
	public static List<Card>getCards(String handle) throws SQLException{//method to get co-authors by author name
		Connection connection=null;
		PreparedStatement proc=null;
		ResultSet rs=null;
		List<Card> cards=new ArrayList<>(); //initialize a blank list of persons
		try {
			connection = Database.getConnection(); //Create new MySQL connection to database
			proc=connection.prepareStatement("Select * from cards where NOT handle=? and id not in (Select card_id from swipe where swiper=?) limit 10"); //Create query with one parameter
			proc.setString(1, handle);
			proc.setString(2,handle );
			rs=proc.executeQuery();
			while(rs.next()){ //Loop for all rows in resultset
				cards.add(new Card(rs)); //Use Person constructor to get person from database result set and add to list
			}
		}
		finally{
			Database.closeConnection(connection,rs,proc); //Close database connection
		}
		return cards;
	}
	public static Swipe addSwipe(Swipe swipe) throws SQLException { //Method to add a new person to database
		User temp=getUserByHandle(swipe.getSwiper()); //Check if name already exists

		Connection connection=null;
		PreparedStatement proc=null;
		ResultSet rs=null;
		try {
			connection = Database.getConnection();  //Open new MySQL connection
			proc=connection.prepareStatement("INSERT INTO `bias_buster`.`swipe`(`card_id`,`swiper`,`score`)VALUES(?,?,?);",Statement.RETURN_GENERATED_KEYS); //flag returns the autoincrement id
			proc.setLong(1, swipe.getCard_id());
			proc.setString(2, swipe.getSwiper());
			proc.setInt(3, swipe.getScore());
			proc.executeUpdate();
			rs = proc.getGeneratedKeys(); //stores the autogenerated keys(id of the person) in the result set
		    if(rs.next())
		    swipe.setId(rs.getLong(1));
		}
		finally{
			Database.closeConnection(connection,rs,proc); //Close connection and deallocate
		}
		return swipe;
	}
	
	public static Card addCard(Card card) throws SQLException { //Method to add a new person to database
		User temp=getUserByHandle(card.getHandle()); //Check if name already exists

		Connection connection=null;
		PreparedStatement proc=null;
		ResultSet rs=null;
		try {
			connection = Database.getConnection();  //Open new MySQL connection
			proc=connection.prepareStatement("INSERT INTO `bias_buster`.`cards`(`preference`,`handle`,`answer`)VALUES(?,?,?);",Statement.RETURN_GENERATED_KEYS); //flag returns the autoincrement id
			proc.setString(1, card.getPreference());
			proc.setString(2, card.getHandle());
			proc.setString(3, temp.getGender());
			proc.executeUpdate();
			rs = proc.getGeneratedKeys(); //stores the autogenerated keys(id of the person) in the result set
		    if(rs.next())
		    card.setId(rs.getLong(1));
		}
		finally{
			Database.closeConnection(connection,rs,proc); //Close connection and deallocate
		}
		return card;
	}
	
	public static User addUser(User user) throws SQLException { //Method to add a new person to database
		User temp=getUserByHandle(user.getHandle()); //Check if name already exists
		if(temp!=null)return temp;  // return person if already exists
		Connection connection=null;
		PreparedStatement proc=null;
		ResultSet rs=null;
		try {
			connection = Database.getConnection();  //Open new MySQL connection
			proc=connection.prepareStatement("INSERT INTO `bias_buster`.`users`(`handle`,`gender`)VALUES(?,?);",Statement.RETURN_GENERATED_KEYS); //flag returns the autoincrement id
			proc.setString(1, user.getHandle());
			proc.setString(2, user.getGender());
			System.out.println(user.getHandle());
			proc.executeUpdate();
			rs = proc.getGeneratedKeys(); //stores the autogenerated keys(id of the person) in the result set
		    if(rs.next())
		    user.setId(rs.getLong(1));
		}
		finally{
			Database.closeConnection(connection,rs,proc); //Close connection and deallocate
		}
		return user;
	}

	public static User getUserByHandle(String handle) throws SQLException{  //Method to get person using name attribute
		Connection connection=null;
		PreparedStatement proc=null;
		ResultSet rs=null;
		User user=null;
		try {
			connection = Database.getConnection();  //Open new MySQL connection
			proc=connection.prepareStatement("Select * from users where handle=?");  //MySQL Prepared statement with 1 parameter
			proc.setString(1, handle); 
			rs=proc.executeQuery();
		    if(rs.next())      //Check if result is blank
		    user=new User(rs); //Person class constructor call
		    else return null;
		    
		}
		finally{
			Database.closeConnection(connection,rs,proc); //Close the connection and deallocate result set and prepared statement
		}
		return user;
	}
	


}
